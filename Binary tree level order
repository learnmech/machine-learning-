#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *left, *right;
};

struct node* newNode(int data) {
    struct node* node = (struct node*) malloc(sizeof(struct node));
    node->data = data;
    node->left = node->right = NULL;
    return node;
}

struct node* constructTree(int arr[], int i, int n) {
    if (i < n) {
        struct node *root = newNode(arr[i]);
        root->left = constructTree(arr, 2 * i + 1, n);
        root->right = constructTree(arr, 2 * i + 2, n);
        return root;
    }
    return NULL;
}

void levelOrder(struct node* root) {
    if (root == NULL) return;

    int h = height(root);
    int i;
    for (i = 1; i <= h; i++)
        printGivenLevel(root, i);
}

int height(struct node* node) {
    if (node == NULL)
        return 0;
    else {
        int lheight = height(node->left);
        int rheight = height(node->right);

        if (lheight > rheight)
            return (lheight + 1);
        else
            return (rheight + 1);
    }
}

void printGivenLevel(struct node* root, int level) {
    if (root == NULL)
        return;
    if (level == 1)
        printf("%d ", root->data);
    else if (level > 1) {
        printGivenLevel(root->left, level - 1);
        printGivenLevel(root->right, level - 1);
    }
}

int main() {
    int arr[] = {1, 2, 3, 4, 5, 6, 7};
    int n = sizeof(arr) / sizeof(arr[0]);
    struct node *root = constructTree(arr, 0, n);
    printf("Level Order traversal of the constructed tree is \n");
    levelOrder(root);
    return 0;
}
